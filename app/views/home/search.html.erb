<div class="container">
  <form class="navbar-form" role="search">
    <div class="input-group" id="pac-container">
        <!-- <input type="text" class="form-control" placeholder="Search by location" id="pac-input" onFocus= "getlocate()"> -->
        <div class="input-group-btn">
            <button class="btn btn-default" type="submit" ><i class="glyphicon glyphicon-search"></i></button>
        </div>
    </div><br>
  </form>


  
  <div class="h-100">
    <div class="row h-100 justify-content-center align-items-center">
      <div class="col-10">
        <div id="map"></div>
        <div id="infowindow-content">
          <img src="" width="16" height="16" id="place-icon">
          <span id="place-name"  class="title"></span><br>
          <span id="place-address"></span>
        </div>
      </div>   
    </div>
  </div>   
    
<input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAvuPSxdugPS2FJQibo-i78wVZHWgmKemk&libraries=places&callback=initAutocomplete"
         async defer></script>


  <!-- <script>
    // function initAutocomplete() {
    //     var locations = [["shop",null,null],["My store","28.755740839001362","77.080078125"],["Try2Mart Shope","23.2599333","77.412615"],["Easy day's","25.6653262","78.4609393"],["Food Hi Food","28.5355161","77.3910265"],["Reliance Fresh","28.6691565","77.4537578"],["Deva's Garments","28.6139391","77.2090212"],["Raj Electronics","28.5355161","77.3910265"],["Heera Sweet","19.0759837","72.8776559"],["Bittern Store","28.6139391","77.2090212"]];
    //     var map = new google.maps.Map(document.getElementById('map'), {
    //       center: {lat: -33.8688, lng: 151.2195},
    //       zoom: 13,
    //       mapTypeId: 'roadmap'
    //     });

    //     // Create the search box and link it to the UI element.
    //     var input = document.getElementById('pac-input');
    //     var searchBox = new google.maps.places.SearchBox(input);
    //     // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    //     // Bias the SearchBox results towards current map's viewport.
    //     map.addListener('bounds_changed', function() {
    //       searchBox.setBounds(map.getBounds());
    //     });

    //     var markers = [];
    //     // Listen for the event fired when the user selects a prediction and retrieve
    //     // more details for that place.
    //     searchBox.addListener('places_changed', function() {
    //       var places = searchBox.getPlaces();

    //       if (places.length == 0) {
    //         return;
    //       }

    //       // Clear out the old markers.
    //       markers.forEach(function(marker) {
    //         marker.setMap(null);
    //       });
    //       markers = [];

    //       // For each place, get the icon, name and location.
    //       var bounds = new google.maps.LatLngBounds();
    //       places.forEach(function(place) {
    //         if (!place.geometry) {
    //           console.log("Returned place contains no geometry");
    //           return;
    //         }
    //         var icon = {
    //           url: place.icon,
    //           size: new google.maps.Size(71, 71),
    //           origin: new google.maps.Point(0, 0),
    //           anchor: new google.maps.Point(17, 34),
    //           scaledSize: new google.maps.Size(25, 25)
    //         };

    //         // Create a marker for each place.
    //         markers.push(new google.maps.Marker({
    //           map: map,
    //           icon: icon,
    //           title: place.name,
    //           position: place.geometry.location
    //         }));

    //         if (place.geometry.viewport) {
    //           // Only geocodes have viewport.
    //           bounds.union(place.geometry.viewport);
    //         } else {
    //           bounds.extend(place.geometry.location);
    //         }
    //       });
    //       map.fitBounds(bounds);
    //     });
    //   }








    // function initMap() {
    //   var map = new google.maps.Map(document.getElementById('map'), {
    //     center: {lat: 50.064192, lng: -130.605469},
    //     zoom: 3
    //   });
    //   var card = document.getElementById('pac-card');
    //   var input = document.getElementById('pac-input');
    //   var countries = document.getElementById('country-selector');

    //   map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

    //   var autocomplete = new google.maps.places.Autocomplete(input);

    //   // Set initial restrict to the greater list of countries.
    //   autocomplete.setComponentRestrictions(
    //       {'country': ['us', 'pr', 'vi', 'gu', 'mp']});

    //   // Specify only the data fields that are needed.
    //   autocomplete.setFields(
    //       ['address_components', 'geometry', 'icon', 'name']);

    //   var infowindow = new google.maps.InfoWindow();
    //   var infowindowContent = document.getElementById('infowindow-content');
    //   infowindow.setContent(infowindowContent);
    //   var marker = new google.maps.Marker({
    //     map: map,
    //     anchorPoint: new google.maps.Point(0, -29)
    //   });

    //   autocomplete.addListener('place_changed', function() {
    //     infowindow.close();
    //     marker.setVisible(false);
    //     var place = autocomplete.getPlace();
    //     if (!place.geometry) {
    //       // User entered the name of a Place that was not suggested and
    //       // pressed the Enter key, or the Place Details request failed.
    //       window.alert("No details available for input: '" + place.name + "'");
    //       return;
    //     }

    //     // If the place has a geometry, then present it on a map.
    //     if (place.geometry.viewport) {
    //       map.fitBounds(place.geometry.viewport);
    //     } else {
    //       map.setCenter(place.geometry.location);
    //       map.setZoom(17);  // Why 17? Because it looks good.
    //     }
    //     marker.setPosition(place.geometry.location);
    //     marker.setVisible(true);

    //     var address = '';
    //     if (place.address_components) {
    //       address = [
    //         (place.address_components[0] && place.address_components[0].short_name || ''),
    //         (place.address_components[1] && place.address_components[1].short_name || ''),
    //         (place.address_components[2] && place.address_components[2].short_name || '')
    //       ].join(' ');
    //     }

    //     infowindowContent.children['place-icon'].src = place.icon;
    //     infowindowContent.children['place-name'].textContent = place.name;
    //     infowindowContent.children['place-address'].textContent = address;
    //     infowindow.open(map, marker);
    //   });

    //   // Sets a listener on a given radio button. The radio buttons specify
    //   // the countries used to restrict the autocomplete search.
    //   function setupClickListener(id, countries) {
    //     var radioButton = document.getElementById(id);
    //     radioButton.addEventListener('click', function() {
    //       autocomplete.setComponentRestrictions({'country': countries});
    //     });
    //   }

    //   setupClickListener('changecountry-usa', 'us');
    //   setupClickListener(
    //       'changecountry-usa-and-uot', ['us', 'pr', 'vi', 'gu', 'mp']);
    // }
  </script> -->
  <!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAvuPSxdugPS2FJQibo-i78wVZHWgmKemk&libraries=places&callback=initAutocomplete"
      async defer></script> -->

  <section>
    <div class="h-100">
      <div class="row h-100 justify-content-center align-items-center">
        <div class="col-10">
          <h3 align="center">Upcoming Events</h3>
          <% @event_paginator.all.each do |event|%>
            <div class="card" style="width: 18rem;">
              <div class="card-body">
                <h5 class="card-title"><%= event.title %></h5>
                <p class="card-text"><%= event.address %></p>
                <p class="card-text"><%= event.start_date %></p>
                <p class="card-text"><%= event.end_date %></p>
                <a href="#" class="btn btn-primary">Go somewhere</a>
              </div>
            </div>
            <% end %>
        </div>   
      </div>
    </div> <br> 
    <div class= "digg_pagination row h-100 justify-content-center align-items-center">
      <%= will_paginate @event_paginator, renderer: BootstrapPagination::Rails, previous_label: "Older", next_label: "Newer", inner_window: 1, outer_window: 0 %> 
    </div> 
  </section>
</div>